import fs from "node:fs/promises";
import path from "node:path";
import { rollup } from "rollup";
import { nodeResolve } from "@rollup/plugin-node-resolve";
import replace from "@rollup/plugin-replace";

const __dirname = import.meta.dirname;

export default async function wrapInScripts (markup, { title, now, input_file_name, raw, meta, livereload }) {
  const VERSION = JSON.parse((await fs.readFile(path.join(__dirname, '..', 'package.json'))).toString()).version;

  let styles = await fs.readFile(path.join(__dirname, '..', 'lib-browser','styles.css'));
  const license = await fs.readFile(path.join(__dirname, '..', 'LICENSE'));

  let csv_parse;
  let chartist;
  let prism;

  const has_datasets = markup.includes('<pre><code class="language-csv=')
    || markup.includes('<pre><code class="language-json=');
  const has_charts = markup.includes('class="js-amd-embed"');
  const has_code = markup.includes("<pre><code>") || has_datasets;

  let script_content = '';
  script_content = await bundle({ has_datasets, has_charts, has_code });
  if (has_datasets) {
    csv_parse = await loadCSVParse();
    script_content = csv_parse.injectLicense(script_content);
  }
  if (has_charts) {
    chartist = await loadChartist();
    script_content = chartist.injectLicense(script_content);
    styles += '\n' + chartist.styles;
  }
  if (has_code) {
    prism = await loadPrism();
    script_content = prism.injectLicense(script_content);
    styles += '\n' + prism.styles;
  }

  let livereload_script = '';
  if (livereload) {
    livereload_script = getLivereloadScript(livereload);
  }

  return `<!doctype html>
<html>
<head>
<!--
This file was generated by Active Markdown, v${ VERSION } - https://activemarkdown.alecperkins.net

${ input_file_name } - ${ now.toISOString() }
-->
  <title>${ title }</title>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <style>${styles}</style>
</head>
<body data-activemd="false" data-filename="${ encodeURIComponent(input_file_name) }">
  <main id="activemd_active_doc">${markup}</main>
  <textarea disabled id="activemd_raw_source">${encodeURIComponent(raw)}</textarea>
  <script>
  /*
  Active Markdown is released under the MIT license.

  ${ license }

  */
    const __amd_meta__ = JSON.parse(decodeURIComponent('${encodeURIComponent(JSON.stringify(meta))}'));
    ${script_content.trim()}
  </script>
  ${livereload_script}
</body>
</html>
`;
}


async function bundle (features) {
  const bundle = await rollup({
    input: path.join(__dirname, '..', 'lib-browser','main.js'),
    treeshake: 'smallest',
    plugins: [
      nodeResolve(),
      replace({
        HAS_DATASETS: JSON.stringify(features.has_datasets),
        HAS_CODE: JSON.stringify(features.has_code),
        HAS_CHARTS: JSON.stringify(features.has_charts),
        preventAssignment: true,
      }),
    ],
  });
  const { output } = await bundle.generate({
    format: 'iife',
  });
  return output[0].code;
}

async function loadCSVParse () {
  const license = (await fs.readFile(path.join(__dirname,'..', 'node_modules','csv-parse','LICENSE'))).toString();
  function injectLicense (script_content) {
    return script_content.replace(`class DatasetEmbed {`,`
/*
https://csv.js.org/parse/

${license}
*/

      class DatasetEmbed {`);
  }
  return { injectLicense, styles: '' };
}

async function loadPrism () {
  const license = (await fs.readFile(path.join(__dirname, '..','node_modules','prism-code-editor','LICENSE'))).toString();
  const styles = [
    (await fs.readFile(path.join(__dirname,'..','node_modules','prism-code-editor','dist','layout.css'))).toString(),
    (await fs.readFile(path.join(__dirname,'..','node_modules','prism-code-editor','dist','scrollbar.css'))).toString(),
    (await fs.readFile(path.join(__dirname,'..','node_modules','prism-code-editor','dist','themes/prism.css'))).toString(),
  ].join('');
  function injectLicense (script_content) {
    return script_content.replace(`var plainTextGrammar = {};`, `
      /*
      https://www.npmjs.com/package/prism-code-editor

      ${ license }
      */
        var plainTextGrammar = {};`);
  }
  return { injectLicense, styles };
}

async function loadChartist () {
  const license = (await fs.readFile(path.join(__dirname,'..','node_modules','chartist','LICENSE-MIT'))).toString();
  const styles = (await fs.readFile(path.join(__dirname,'..','node_modules','chartist','dist','index.css'))).toString().replace('/*# sourceMappingURL=index.css.map */','');

  function injectLicense (script_content) {
    return script_content.replace(`  /**
      * This object contains all namespaces used within Chartist.`,`/*
   https://www.npmjs.com/package/chartist

   ${ license }
   */

     /**
      * This object contains all namespaces used within Chartist.`);
  }
  return { injectLicense, styles };
}

function getLivereloadScript (port) {
  return `
    <script>
      ;(async function () {
        const req = await fetch('http://localhost:${ port }');
        const body = await req.text();
        if (body === "reload") {
          window.location.reload();
        } else if (body === "error") {
          const el = document.createElement('div');
          el.style.position = "fixed";
          el.style.top = "2px";
          el.style.left = "2px";
          el.style.color = "red";
          el.style.backgroundColor = "white";
          el.style.border = "1px solid red";
          el.style.padding = "2px";
          el.textContent = "There was a compilation error. Check your terminal for details.";
          document.body.appendChild(el);
        }
      })().catch(error => {
        console.error(error)
      });
    </script>
  `
}
